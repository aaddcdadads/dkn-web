#!/bin/bash

# 应用web代码仓库初始化

# 文件夹基础目录
base_dir={{workdir}}

# 应用web仓库文件夹名称
target_dir={{targetDir}}

# 仓库gitlab clone地址列表 示例: dirs=("ssh://xx1.git,ssh://xx2.git,ssh://xx3.git,ssh://xx4.git,ssh://xx5.git")
gitlab_urls_str=({{gitlabUrls}})
# 将IFS设置为逗号
IFS=','
# 将字符串分割为数组
gitlab_urls=($gitlab_urls_str)

# 待合并的微应用仓库文件夹名列表 示例: dirs=("dir2,dir3,dir4,dir5")
merge_dirs_str=({{mergeDirs}})
# 将IFS设置为逗号
IFS=','
# 将字符串分割为数组
merge_dirs=($merge_dirs_str)


# 进入工作目录
cd $base_dir

# 克隆仓库代码
echo "===> 1.克隆仓库代码 start"
for url in "${gitlab_urls[@]}"; do
    git clone $url --quiet
done
echo "===> 1.克隆仓库代码 success"


# 合并merge_dirs文件夹到base_dir
echo "===> 2.合并web目录 start"
for dir in "${merge_dirs[@]}"; do
    # 检查目录是否存在
    if [ -d "$base_dir/$dir" ]; then
        #删除目录中的.git 
        rm -rf $base_dir/$dir/.git
        rm -rf $base_dir/$dir/.gitlab-ci.yml
        # 移动目录中的文件到 target_dir
        mv "$base_dir/$dir"/* "$base_dir/$target_dir/"
        # 隐藏文件也需要复制
        cp -a $base_dir/$dir/. $base_dir/$target_dir/
        # 删除空目录
        # rmdir "$base_dir/$dir"
        echo "文件夹 $dir 已合并到 $target_dir"
    else
        echo "文件夹 $dir 不存在"
    fi
done
echo "===> 2.合并web目录 success"


echo "===> 3.初始化项目配置 start"
# 拷贝init.sh脚本
cp {{initJeecgVue3ShPath}} $target_dir/init_jeecg_vue3.sh
cd $target_dir
chmod a+x init_jeecg_vue3.sh
./init_jeecg_vue3.sh
echo "===> 3.初始化项目配置 success"


# 使用sed命令修改init.json中的版本号,防止后面二次触发初始ci
sed -i "s/"version": "1.0"/"version": "1.1"/g" scripts/init.json


# 提交应用web仓库代码
echo "===> 4.提交应用web仓库代码 start"
cd $target_dir
pwd
git add . > /dev/null 2>&1
git commit -m "init repo" --quiet
git push --quiet
echo "===> 4.提交应用web仓库代码 success"

# 安装依赖
echo "===> 5.安装依赖 start"
#npm install --force > /dev/null
yarn install --force > /dev/null
echo "===> 5.安装依赖 success"

#部署服务
echo "===> 6.部署服务 start"
pwd
./deploy.sh
echo "===> 6.部署服务 success"


echo "~~ 应用web仓库初始化完成 ~~"